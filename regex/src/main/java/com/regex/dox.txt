
java 正则表达式通过 java.util.regex 包下的 Pattern 类与 Matcher 类实现
共分三步:
1构造一个模式 .
Pattern p=Pattern.compile("[a-z]*");
2建造一个匹配器
Matcher m = p.matcher(str);
3进行判断,得到结果
boolean b = m.matches() ;

Matcher 类提供三个匹配操作方法,三个方法均返回 boolean 类型,当匹配到
时返回 true,没匹配到则返回 false
1: m.matches()
matches() 对整个字符串进行匹配 , 只有整个字符串都匹配了才返回 true
2: m.lookingAt()
lookingAt() 对前面的字符串进行匹配 , 只有匹配到的字符串在最前面才返回 true
3: m.find()
find() 对字符串进行匹配 , 匹配到的字符串可以在任何位置

Matcher 类的其他方法
int groupcount() 返回此匹配器模式中的捕获组数。
String replaceAll(String replacement) 用给定的 replacement 全部替代匹配的部分
String repalceFirst(String replacement) 用给定的 replacement 替代第一次匹配的部分
appendReplacement(StringBuffer sb,String replacement) 根 据 模 式 用
replacement 替换相应内容 , 并将匹配的结果添加到 sb 当前位置之后
StringBuffer appendTail(StringBuffer sb) 将输入序列中匹配之后的末尾字串添加到 sb 当前位置之后 .
group(n) 0 代表永远都是匹配整个表达式的字符串的那部分 n<>0 时代表第 n 组匹配的部分